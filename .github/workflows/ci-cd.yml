name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

      - name: Upload artifact for GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Set up Docker Buildx
      #  if: github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
      #  if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
      #  if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/tasklist-react-app:latest


  deploy-pages:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-aws:
  #  if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.get_ip.outputs.instance_ip }}
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Get Instance IP
        id: get_ip
        run: |
          cd terraform
          echo "instance_ip=$(terraform output -raw instance_ip)" >> $GITHUB_OUTPUT

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $(cd terraform && terraform output -raw instance_ip) >> ~/.ssh/known_hosts

      - name: Create Ansible inventory
        run: |
          echo "all:" > ansible/inventory.yml
          echo "  hosts:" >> ansible/inventory.yml
          echo "    web:" >> ansible/inventory.yml
          echo "      ansible_host: ${{ steps.get_ip.outputs.instance_ip }}" >> ansible/inventory.yml
          echo "      ansible_user: ubuntu" >> ansible/inventory.yml
          echo "      ansible_ssh_private_key_file: ~/.ssh/id_rsa" >> ansible/inventory.yml

      - name: Deploy with Ansible
        run: |
          cd ansible
          ansible-playbook -i inventory.yml playbook.yml -e "docker_image=${{ secrets.DOCKER_USERNAME }}/tasklist-react-app:latest"